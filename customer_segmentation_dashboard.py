# -*- coding: utf-8 -*-
"""customer_segmentation_dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BYYOb7Qr_TKTEhqkbBQ0oE2eBGhjKCxV
"""
# customer_segmentation_dashboard.py
import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

st.set_page_config(page_title="Customer Segmentation Dashboard",
                   page_icon="🧠",
                   layout="wide")
@st.cache_data
def load_data():
    rfm = pd.read_csv("rfm_with_km_ae.csv")
    tsne = pd.read_csv("tsne_with_km_ae.csv")
    # optional: stats csv produced in notebook
    try:
        stats = pd.read_csv("anova_tukey_summary.csv")
    except FileNotFoundError:
        stats = None
    return rfm, tsne, stats

rfm_df, tsne_df, stats_df = load_data()

# ──────────────────────────────── Sidebar ──────────────────────────────────────
st.sidebar.title("📂 Navigation")
section = st.sidebar.radio(
    "Go to section",
    ["Overview", "Cluster Distribution", "RFM Boxplots",
     "Feature Explorer", "Cluster Profiles", "t-SNE Visualization",
     "Stat-Validation"]
)

# cluster filter
cluster_list = sorted(rfm_df["KM_AE"].unique())
selected_cluster = st.sidebar.selectbox("Focus cluster", ["All"]+cluster_list)

# customer search
search_id = st.sidebar.text_input("🔍 Lookup Customer ID")

# theme toggle
if "dark" not in st.session_state:
    st.session_state.dark = False
if st.sidebar.checkbox("🌗 Dark mode", value=st.session_state.dark):
    sns.set_theme(style="darkgrid")
    st.session_state.dark = True
else:
    sns.set_theme(style="whitegrid")
    st.session_state.dark = False

# ─────────────────────────────── Helper: filter ───────────────────────────────
def _filtered(df):
    if selected_cluster != "All":
        df = df[ df["KM_AE"] == selected_cluster ]
    if search_id:
        df = df[ df["Customer ID"].astype(str).str.contains(search_id) ]
    return df

filtered_rfm = _filtered(rfm_df)

# ────────────────────────────────── Overview ───────────────────────────────────
if section == "Overview":
    st.subheader("📌 Model Summary")
    st.markdown(
    """
    * Clustering **KMeans (k=3)** on **AutoEncoder-encoded** RFM space  
    * Validation: **ANOVA (p<0.001)** + **Tukey HSD** (R, F, M all significantly different)  
    * Baseline Silhouette = 0.60 → Final Model Silhouette = 0.68 (+13%)  
    """
    )

    # KPI cards
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Total Customers", len(filtered_rfm))
    col2.metric("Avg Recency", f"{filtered_rfm['Recency'].mean():.1f}")
    col3.metric("Avg Frequency", f"{filtered_rfm['Frequency'].mean():.1f}")
    col4.metric("Avg Monetary (£)", f"{filtered_rfm['Monetary'].mean():,.0f}")

# ───────────────────────────── Cluster Distribution ───────────────────────────
elif section == "Cluster Distribution":
    st.subheader("🧮 Cluster Counts (after filter)")
    counts = filtered_rfm["KM_AE"].value_counts().sort_index()
    st.bar_chart(counts)

# ───────────────────────────────── RFM Boxplots ───────────────────────────────
elif section == "RFM Boxplots":
    st.subheader("📦 RFM Distribution by Cluster")
    for feat in ["Recency","Frequency","Monetary"]:
        fig, ax = plt.subplots()
        sns.boxplot(data=filtered_rfm, x="KM_AE", y=feat, palette="Set2", ax=ax)
        ax.set_title(f"{feat} by Cluster")
        st.pyplot(fig)

# ───────────────────────────── Feature Explorer ───────────────────────────────
elif section == "Feature Explorer":
    st.subheader("🔎 Histogram Explorer")
    feat = st.selectbox("Select feature", ["Recency","Frequency","Monetary","RFM_Score"])
    bins = st.slider("Bins", 10, 100, 40)
    fig, ax = plt.subplots()
    if selected_cluster=="All":
        sns.histplot(data=rfm_df, x=feat, hue="KM_AE", bins=bins, ax=ax, element="step")
    else:
        sns.histplot(data=filtered_rfm, x=feat, bins=bins, ax=ax, color="steelblue")
    st.pyplot(fig)

# ───────────────────────────── Cluster Profiles ───────────────────────────────
elif section == "Cluster Profiles":
    st.subheader("📊 Average RFM per Cluster")
    cluster_avg = rfm_df.groupby("KM_AE")[["Recency","Frequency","Monetary"]].mean().round(2)
    st.dataframe(cluster_avg, use_container_width=True)

    st.markdown("### Heatmap")
    fig, ax = plt.subplots()
    sns.heatmap(cluster_avg, annot=True, cmap="YlGnBu", fmt=".1f", ax=ax)
    st.pyplot(fig)

    # Top-N table
    st.markdown("### 🎯 Top 10 Customers (by Monetary)")
    top_n = filtered_rfm.nlargest(10, "Monetary")
    st.dataframe(top_n[["Customer ID","Monetary","KM_AE"]])

    # download
    csv = filtered_rfm.to_csv(index=False).encode()
    st.download_button("⬇️ Download filtered data", csv, "filtered_rfm.csv", "text/csv")

# ─────────────────────────────── t-SNE Viz ────────────────────────────────────
elif section == "t-SNE Visualization":
    st.subheader("🧬 2-D t-SNE Projection")
    fig, ax = plt.subplots()
    plot_df = tsne_df.copy()
    if selected_cluster!="All":
        plot_df = plot_df[ plot_df["KM_AE"] == selected_cluster ]
    sns.scatterplot(data=plot_df, x="TSNE1", y="TSNE2", hue="KM_AE", palette="tab10", s=50, ax=ax)
    ax.set_title("t-SNE Clusters")
    ax.legend(title="Cluster", bbox_to_anchor=(1.05,1), loc="upper left")
    st.pyplot(fig)

# ───────────────────────────── Statistical Validation ─────────────────────────
elif section == "Stat-Validation":
    st.subheader("📑 ANOVA / Tukey Results")
    if stats_df is None:
        st.info("Upload `anova_tukey_summary.csv` to show this tab.")
    else:
        st.dataframe(stats_df)
        st.download_button("Download stats", stats_df.to_csv(index=False).encode(),
                           "anova_tukey_summary.csv", "text/csv")
